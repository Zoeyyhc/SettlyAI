name: Backend CD

on:
  workflow_run:
    workflows: ["CI"]
    types:
      - completed
    branches: [main]

permissions:
  id-token: write
  contents: read

env:
  DOTNET_VERSION: '8.0.x'

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.event == 'push' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Check if database exists (first-time deployment check)
        id: db-check
        run: |
          echo "Checking if database exists..."
          DB_EXISTS=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "docker run --rm -e ApiConfigs__DBConnection=\"${{ secrets.RDS_CONNECTION_STRING }}\" ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest dotnet ef database update --dry-run --startup-project /app/SettlyApi --project /app/SettlyModels > /tmp/db_check.log 2>&1 && echo \"DB_EXISTS=true\" || echo \"DB_EXISTS=false\""
            ]' \
            --query "Command.CommandId" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Database check command ID: $DB_EXISTS"
          echo "Waiting for database check to complete..."
          sleep 20
          
          # Get the command result
          DB_RESULT=$(aws ssm get-command-invocation \
            --command-id "$DB_EXISTS" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Database check result: $DB_RESULT"
          
          if [[ "$DB_RESULT" == *"DB_EXISTS=false"* ]]; then
            echo "first_deployment=true" >> $GITHUB_OUTPUT
            echo "This is a first-time deployment - database initialization required"
          else
            echo "first_deployment=false" >> $GITHUB_OUTPUT
            echo "Database exists - skipping initialization"
          fi
          
      - name: Initialize database (first time only)
        if: steps.db-check.outputs.first_deployment == 'true'
        run: |
          echo "Initializing database for first-time deployment..."
          
          # Run database migration
          echo "Running database migrations..."
          MIGRATE_CMD=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker run --rm \
                -e ApiConfigs__DBConnection=\"${{ secrets.RDS_CONNECTION_STRING }}\" \
                -e ASPNETCORE_ENVIRONMENT=Production \
                ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
                dotnet ef database update --startup-project /app/SettlyApi --project /app/SettlyModels"
            ]' \
            --query "Command.CommandId" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Migration command ID: $MIGRATE_CMD"
          echo "Waiting for migration to complete..."
          sleep 30
          
          # Check migration result
          MIGRATE_RESULT=$(aws ssm get-command-invocation \
            --command-id "$MIGRATE_CMD" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Migration result: $MIGRATE_RESULT"
          
          # Run database seeding
          echo "Seeding database with initial data..."
          SEED_CMD=$(aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker run --rm \
                -e ApiConfigs__DBConnection=\"${{ secrets.RDS_CONNECTION_STRING }}\" \
                -e ASPNETCORE_ENVIRONMENT=Production \
                ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest \
                bash -c \"cd /app/SettlyDbManager && dotnet run -- --seed\""
            ]' \
            --query "Command.CommandId" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Seed command ID: $SEED_CMD"
          echo "Waiting for seeding to complete..."
          sleep 30
          
          # Check seeding result
          SEED_RESULT=$(aws ssm get-command-invocation \
            --command-id "$SEED_CMD" \
            --instance-id "${{ secrets.EC2_INSTANCE_ID }}" \
            --query "StandardOutputContent" --output text --region "${{ secrets.AWS_REGION }}")
          
          echo "Seeding result: $SEED_RESULT"
          echo "Database initialization completed successfully!"
          
      - name: Deploy to EC2 via SSM
        run: |
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker stop settly-api || true",
              "docker rm settly-api || true",
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}",
              "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "docker run -d --name settly-api --restart unless-stopped -p 5100:5100 -e ApiConfigs__DBConnection=\"${{ secrets.RDS_CONNECTION_STRING }}\" -e ASPNETCORE_ENVIRONMENT=Production -e ASPNETCORE_URLS=http://0.0.0.0:5100 ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest",
              "docker image prune -f"
            ]' \
            --region "${{ secrets.AWS_REGION }}"
          
          echo "Waiting for deployment command to complete..."
          sleep 30
          
          aws ssm describe-instance-information --region "${{ secrets.AWS_REGION }}" --filters "Key=InstanceIds,Values=${{ secrets.EC2_INSTANCE_ID }}"
          
      - name: Update database schema (for existing deployments)
        if: steps.db-check.outputs.first_deployment == 'false'
        run: |
          echo "Updating database schema for existing deployment..."
          aws ssm send-command \
            --instance-ids "${{ secrets.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --parameters 'commands=[
              "docker exec settly-api dotnet ef database update --startup-project /app/SettlyApi --project /app/SettlyModels"
            ]' \
            --region "${{ secrets.AWS_REGION }}"
            
      - name: Test AWS Connection
        run: |
          aws sts get-caller-identity
          echo "AWS connection successful"